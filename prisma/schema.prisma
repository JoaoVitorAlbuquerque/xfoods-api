generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  WAITER

  @@map("position_type")
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  email    String   @unique
  password String
  role     UserRole

  Order Order[]

  @@map("users")
}

model Category {
  id   String @id @default(uuid()) @db.Uuid
  icon String
  name String

  Product Product[]

  @@map("categories")
}

model Ingredient {
  id   String @id @default(uuid()) @db.Uuid
  icon String
  name String

  products ProductIngredient[]

  @@map("ingredients")
}

model Product {
  id          String  @id @default(uuid()) @db.Uuid
  categoryId  String  @map("category_id") @db.Uuid
  name        String
  description String
  imagePath   String  @map("image_path")
  price       Float
  deleted     Boolean @default(false)

  category    Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orders      ProductOnOrder[]
  ingredients ProductIngredient[]

  @@map("products")
}

enum OrderType {
  WAITING
  IN_PRODUCTION
  DONE

  @@map("order_type")
}

model Order {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  table       Int
  status      OrderType @default(WAITING)
  createdAt   DateTime  @default(now())
  description String?
  read        Boolean   @default(false)
  restarted   Boolean   @default(false)

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products ProductOnOrder[]

  @@map("orders")
}

enum SizeType {
  TINY
  SMALL
  MEAN
  LARGE
  EXTRA_LARGE
  METER

  @@map("size_type")
}

model ProductIngredient {
  id           String @id @default(uuid()) @db.Uuid
  productId    String @map("product_id") @db.Uuid()
  ingredientId String @map("ingredient_id") @db.Uuid()

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  @@map("product_ingredient")
}

model ProductOnOrder {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @map("order_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  size      SizeType
  quantity  Int      @default(1)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_on_order")
}
